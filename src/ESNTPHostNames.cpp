//
//  ESNTPHostNames.cpp
//
//  Created by Steve Pucci 26 Jan 2011
//  Copyright Emerald Sequoia LLC 2011. All rights reserved.
//

#include <list>
#include <string>
#include <sstream>
#include <assert.h>

#include "ESNTPHostNames.hpp"
#include "ESUtil.hpp"

struct ContinentFarmDescriptor {
    const char *farmName;
    int         numberOfServers;
};

static const ContinentFarmDescriptor Africa 	  = { "africa",		1 };
static const ContinentFarmDescriptor Asia   	  = { "asia",		4 };
static const ContinentFarmDescriptor Europe 	  = { "europe",		4 };
static const ContinentFarmDescriptor NorthAmerica = { "north-america",	4 };
static const ContinentFarmDescriptor Oceania      = { "oceania",	4 };
static const ContinentFarmDescriptor SouthAmerica = { "south-america",	1 };

struct CountryFarmDescriptor {
    const char 		    	  *countryName;
    const char              	  *poolNameForCountry;
    int        		    	  numberOfServers;
    const ContinentFarmDescriptor *continentDescriptor;
};

// Following table generated by scripts/getNTPPoolServers.pl
// on Thu Jan 27 08:52:39 2011 based on data from 101733 downloads
static const int numCountryFarmDescriptors = 233;
static const CountryFarmDescriptor countryFarmDescriptors[233] = {
{ "us", "us", 4, &NorthAmerica},  // United States
{ "jp", "jp", 4, &Asia},  // Japan
{ "gb", "uk", 4, &Europe},  // United Kingdom
{ "uk", "uk", 4, &Europe},  // United Kingdom
{ "ca", "ca", 4, &NorthAmerica},  // Canada
{ "de", "de", 4, &Europe},  // Germany
{ "au", "au", 4, &Oceania},  // Australia
{ "it", "it", 4, &Europe},  // Italy
{ "nl", "nl", 4, &Europe},  // Netherlands
{ "cn", "cn", 1, &Asia},  // China
{ "fr", "fr", 4, &Europe},  // France
{ "ch", "ch", 4, &Europe},  // Switzerland
{ "es", "es", 1, &Europe},  // Spain
{ "hk", "hk", 0, &Asia},  // Hong Kong
{ "se", "se", 4, &Europe},  // Sweden
{ "ru", "ru", 4, &Europe},  // Russia
{ "mx", "mx", 0, &NorthAmerica},  // Mexico
{ "at", "at", 4, &Europe},  // Austria
{ "no", "no", 4, &Europe},  // Norway
{ "be", "be", 1, &Europe},  // Belgium
{ "nz", "nz", 1, &Oceania},  // New Zealand
{ "sg", "sg", 1, &Asia},  // Singapore
{ "br", "br", 1, &SouthAmerica},  // Brazil
{ "tw", "tw", 1, &Asia},  // Taiwan
{ "dk", "dk", 4, &Europe},  // Denmark
{ "kr", "kr", 1, &Asia},  // South Korea
{ "ie", "ie", 1, &Europe},  // Ireland
{ "my", "my", 1, &Asia},  // Malaysia
{ "pl", "pl", 4, &Europe},  // Poland
{ "th", "th", 1, &Asia},  // Thailand
{ "cz", "cz", 4, &Europe},  // Czech Republic
//Overriding continent for Turkey to Europe
{ "tr", "tr", 1, &Europe},  // Turkey
{ "ae", "ae", 0, &Asia},  // United Arab Emirates
{ "za", "za", 1, &Africa},  // South Africa
{ "in", "in", 1, &Asia},  // India
{ "sa", "sa", 0, &Asia },  // Saudi Arabia
{ "ar", "ar", 0, &SouthAmerica},  // Argentina
{ "cl", "cl", 0, &SouthAmerica},  // Chile
{ "pt", "pt", 1, &Europe},  // Portugal
{ "gr", "gr", 1, &Europe},  // Greece
{ "lu", "lu", 1, &Europe},  // Luxembourg
{ "co", "co", 0, &SouthAmerica },  // Colombia
{ "id", "id", 1, &Asia},  // Indonesia
{ "ph", "ph", 0, &Asia},  // Philippines
{ "fi", "fi", 4, &Europe},  // Finland
{ "ro", "ro", 4, &Europe},  // Romania
{ "il", "il", 0, &Asia},  // Israel
{ "hu", "hu", 4, &Europe},  // Hungary
{ "hr", "hr", 0, &Europe},  // Croatia
{ "kw", "kw", 0, &Asia },  // Kuwait
{ "sk", "sk", 1, &Europe},  // Slovakia
{ "si", "si", 4, &Europe},  // Slovenia
{ "mo", "mo", 0, &Asia },  // Macao SAR China
{ "lb", "lb", 0, &Asia },  // Lebanon
{ "ve", "ve", 0, &SouthAmerica},  // Venezuela
{ "eg", "eg", 0, &Africa },  // Egypt
{ "ec", "ec", 0, &SouthAmerica },  // Ecuador
{ "cr", "cr", 0, &NorthAmerica},  // Costa Rica
{ "pa", "pa", 0, &NorthAmerica},  // Panama
{ "pe", "pe", 0, &SouthAmerica },  // Peru
{ "qa", "qa", 0, &Asia},  // Qatar
{ "vn", "vn", 1, &Asia},  // Vietnam
{ "bg", "bg", 4, &Europe},  // Bulgaria
{ "lt", "lt", 0, &Europe},  // Lithuania
{ "do", "do", 0, &NorthAmerica },  // Dominican Republic
{ "pk", "pk", 0, &Asia},  // Pakistan
{ "mt", "mt", 0, &Europe },  // Malta
{ "tn", "tn", 0, &Africa },  // Tunisia
{ "gt", "gt", 0, &NorthAmerica},  // Guatemala
{ "kz", "kz", 0, &Asia },  // Kazakhstan
{ "sv", "sv", 0, &NorthAmerica},  // El Salvador
{ "lk", "lk", 0, &Asia},  // Sri Lanka
{ "ee", "ee", 0, &Europe},  // Estonia
{ "lv", "lv", 1, &Europe},  // Latvia
{ "uy", "uy", 0, &SouthAmerica },  // Uruguay
{ "ni", "ni", 0, &NorthAmerica },  // Nicaragua
{ "py", "py", 0, &SouthAmerica },  // Paraguay
{ "jo", "jo", 0, &Asia },  // Jordan
{ "jm", "jm", 0, &NorthAmerica },  // Jamaica
{ "am", "am", 0, &Asia },  // Armenia
{ "hn", "hn", 0, &NorthAmerica },  // Honduras
{ "mk", "mk", 0, &Europe},  // Macedonia
{ "md", "md", 1, &Europe},  // Moldova
{ "sn", "sn", 0, &Africa },  // Senegal
{ "ke", "ke", 0, &Africa },  // Kenya
{ "ml", "ml", 0, &Africa },  // Mali
{ "mu", "mu", 0, &Asia },  // Mauritius
{ "bw", "bw", 0, &Africa },  // Botswana
{ "ad", "ad", 0, &Europe },  // Andorra
{ "af", "af", 0, &Asia },  // Afghanistan
{ "ag", "ag", 0, &NorthAmerica },  // Antigua and Barbuda
{ "ai", "ai", 0, &NorthAmerica },  // Anguilla
{ "al", "al", 0, &Europe },  // Albania
{ "an", "an", 0, &NorthAmerica },  // Netherlands Antilles
{ "ao", "ao", 0, &Africa},  // Angola
{ "aq", "aq", 0, &Oceania },  // Antarctica
{ "as", "as", 0, &Oceania },  // American Samoa
{ "aw", "aw", 0, &NorthAmerica },  // Aruba
{ "az", "az", 0, &Asia },  // Azerbaijan
{ "ba", "ba", 0, &Europe},  // Bosnia and Herzegovina
{ "bb", "bb", 0, &NorthAmerica },  // Barbados
{ "bd", "bd", 0, &Asia},  // Bangladesh
{ "bf", "bf", 0, &Africa },  // Burkina Faso
{ "bh", "bh", 0, &Asia },  // Bahrain
{ "bi", "bi", 0, &Africa },  // Burundi
{ "bj", "bj", 0, &Africa },  // Benin
{ "bm", "bm", 0, &NorthAmerica },  // Bermuda
{ "bn", "bn", 0, &Asia },  // Brunei
{ "bo", "bo", 0, &SouthAmerica },  // Bolivia
{ "bs", "bs", 0, &NorthAmerica},  // Bahamas
{ "bt", "bt", 0, &Asia },  // Bhutan
{ "by", "by", 1, &Europe},  // Belarus
{ "bz", "bz", 0, &NorthAmerica },  // Belize
{ "cd", "cd", 0, &Africa },  // Congo (Kinshasa)
{ "cf", "cf", 0, &Africa },  // Central African Republic
{ "cg", "cg", 0, &Africa },  // Congo (Brazzaville)
{ "ci", "ci", 0, &Africa },  // Ivory Coast
{ "cm", "cm", 0, &Africa },  // Cameroon
{ "cu", "cu", 0, &NorthAmerica },  // Cuba
{ "cv", "cv", 0, &Africa },  // Cape Verde
{ "cx", "cx", 0, &Oceania },  // Christmas Island
{ "cy", "cy", 0, &Europe },  // Cyprus
{ "dj", "dj", 0, &Africa },  // Djibouti
{ "dm", "dm", 0, &NorthAmerica },  // Dominica
{ "dz", "dz", 0, &Africa },  // Algeria
{ "eh", "eh", 0, &Africa },  // Western Sahara
{ "er", "er", 0, &Africa },  // Eritrea
{ "et", "et", 0, &Africa },  // Ethiopia
{ "fj", "fj", 0, &Oceania },  // Fiji
{ "fk", "fk", 0, &SouthAmerica },  // Falkland Islands
{ "fm", "fm", 0, &Oceania },  // Micronesia
{ "fo", "fo", 0, &Europe },  // Faroe Islands
{ "ga", "ga", 0, &Africa },  // Gabon
{ "gd", "gd", 0, &NorthAmerica },  // Grenada
{ "ge", "ge", 0, &Asia },  // Georgia
{ "gf", "gf", 0, &SouthAmerica },  // French Guiana
{ "gg", "gg", 0, &Europe },  // Guernsey
{ "gh", "gh", 0, &Africa },  // Ghana
{ "gi", "gi", 0, &Europe },  // Gibraltar
{ "gl", "gl", 0, &NorthAmerica },  // Greenland
{ "gm", "gm", 0, &Africa },  // Gambia
{ "gn", "gn", 0, &Africa },  // Guinea
{ "gp", "gp", 0, &NorthAmerica },  // Guadeloupe
{ "gq", "gq", 0, &Africa },  // Equatorial Guinea
{ "gs", "gs", 0, &SouthAmerica },  // South Georgia and the South Sandwich Islands
{ "gu", "gu", 0, &Oceania },  // Guam
{ "gw", "gw", 0, &Africa },  // Guinea-Bissau
{ "gy", "gy", 0, &SouthAmerica },  // Guyana
{ "hm", "hm", 0, &Oceania },  // Heard Island and McDonald Islands
{ "ht", "ht", 0, &NorthAmerica },  // Haiti
{ "im", "im", 0, &Europe },  // Isle of Man
{ "io", "io", 0, &Asia },  // British Indian Ocean Territory
{ "iq", "iq", 0, &Asia },  // Iraq
{ "ir", "ir", 0, &Asia},  // Iran
{ "is", "is", 0, &Europe },  // Iceland
{ "je", "je", 0, &Europe },  // Jersey
{ "kg", "kg", 0, &Asia},  // Kyrgyzstan
{ "kh", "kh", 0, &Asia},  // Cambodia
{ "ki", "ki", 0, &Oceania },  // Kiribati
{ "kp", "kp", 0, &Asia },  // North Korea
{ "ky", "ky", 0, &NorthAmerica },  // Cayman Islands
{ "la", "la", 0, &Asia },  // Laos
{ "lc", "lc", 0, &NorthAmerica },  // Saint Lucia
{ "li", "li", 0, &Europe },  // Liechtenstein
{ "lr", "lr", 0, &Africa },  // Liberia
{ "ls", "ls", 0, &Africa },  // Lesotho
{ "ly", "ly", 0, &Africa },  // Libya
{ "ma", "ma", 0, &Africa },  // Morocco
{ "mc", "mc", 0, &Europe },  // Monaco
{ "mg", "mg", 0, &Africa},  // Madagascar
{ "mh", "mh", 0, &Oceania },  // Marshall Islands
{ "mm", "mm", 0, &Asia },  // Myanmar
{ "mn", "mn", 0, &Asia },  // Mongolia
{ "mp", "mp", 0, &Oceania },  // Northern Mariana Islands
{ "mq", "mq", 0, &NorthAmerica },  // Martinique
{ "mr", "mr", 0, &Africa },  // Mauritania
{ "ms", "ms", 0, &NorthAmerica },  // Montserrat
{ "mv", "mv", 0, &Asia },  // Maldives
{ "mw", "mw", 0, &Africa },  // Malawi
{ "mz", "mz", 0, &Africa },  // Mozambique
{ "na", "na", 0, &Africa },  // Namibia
{ "nc", "nc", 0, &Oceania},  // New Caledonia
{ "ne", "ne", 0, &Africa },  // Niger
{ "nf", "nf", 0, &Oceania },  // Norfolk Island
{ "ng", "ng", 0, &Africa },  // Nigeria
{ "np", "np", 0, &Asia },  // Nepal
{ "nr", "nr", 0, &Oceania },  // Nauru
{ "nu", "nu", 0, &Oceania },  // Niue
{ "om", "om", 0, &Asia},  // Oman
{ "pf", "pf", 0, &Oceania },  // French Polynesia
{ "pg", "pg", 0, &Oceania },  // Papua New Guinea
{ "pm", "pm", 0, &NorthAmerica },  // Saint Pierre and Miquelon
{ "pn", "pn", 0, &Oceania },  // Pitcairn
{ "pr", "pr", 0, &NorthAmerica },  // Puerto Rico
{ "ps", "ps", 0, &Asia },  // Palestinian Territory
{ "pw", "pw", 0, &Oceania },  // Palau
{ "rs", "rs", 1, &Europe},  // Serbia
{ "rw", "rw", 0, &Africa },  // Rwanda
{ "sb", "sb", 0, &Oceania },  // Solomon Islands
{ "sc", "sc", 0, &Asia },  // Seychelles
{ "sd", "sd", 0, &Africa },  // Sudan
{ "sh", "sh", 0, &Africa },  // Saint Helena
{ "sj", "sj", 0, &Europe },  // Svalbard and Jan Mayen
{ "sl", "sl", 0, &Africa },  // Sierra Leone
{ "sm", "sm", 0, &Europe },  // San Marino
{ "so", "so", 0, &Africa },  // Somalia
{ "sr", "sr", 0, &SouthAmerica },  // Suriname
{ "st", "st", 0, &Africa },  // Sao Tome and Principe
{ "sy", "sy", 0, &Asia },  // Syria
{ "sz", "sz", 0, &Africa },  // Swaziland
{ "td", "td", 0, &Africa },  // Chad
{ "tg", "tg", 0, &Africa },  // Togo
{ "tj", "tj", 0, &Asia },  // Tajikistan
{ "tl", "tl", 0, &Oceania },  // East Timor
{ "tm", "tm", 0, &Asia },  // Turkmenistan
{ "to", "to", 0, &Oceania },  // Tonga
{ "tt", "tt", 0, &NorthAmerica },  // Trinidad and Tobago
{ "tv", "tv", 0, &Oceania },  // Tuvalu
{ "tz", "tz", 0, &Africa},  // Tanzania
{ "ua", "ua", 4, &Europe},  // Ukraine
{ "ug", "ug", 0, &Africa },  // Uganda
{ "um", "um", 0, &NorthAmerica },  // United States Minor Outlying Islands
{ "uz", "uz", 0, &Asia},  // Uzbekistan
{ "va", "va", 0, &Europe },  // Vatican
{ "vc", "vc", 0, &NorthAmerica },  // Saint Vincent and the Grenadines
{ "vg", "vg", 0, &NorthAmerica },  // British Virgin Islands
{ "vi", "vi", 0, &NorthAmerica },  // U.S. Virgin Islands
{ "vu", "vu", 0, &Oceania },  // Vanuatu
{ "ws", "ws", 0, &Oceania },  // Samoa
{ "ye", "ye", 0, &Asia },  // Yemen
{ "yu", "yu", 0, &Europe},  // Serbia And Montenegro
{ "zm", "zm", 0, &Africa },  // Zambia
{ "zw", "zw", 0, &Africa },  // Zimbabwe
};

static const CountryFarmDescriptor defaultCountryDescriptor = { "us", "us", 4, &Europe };

static const int numGlobalServers = 4;  // e.g, 0.pool.ntp.org

const struct CountryFarmDescriptor *
getFarmDescriptorForCountry(const char *cc) {
    if (*cc) {
	for (int i = 0; i < numCountryFarmDescriptors; i++) {
	    const CountryFarmDescriptor *farmDescriptor = &countryFarmDescriptors[i];
            if (strcasecmp(cc, farmDescriptor->countryName) == 0) {
		return farmDescriptor;
	    }
	}
    }
    std::string locale = ESUtil::localeCountryCode();  // Returns empty string if uninitialized, never NULL
    const char *cc2 = locale.c_str();
    if (strcmp(cc, cc2) && *cc2) {
	for (int i = 0; i < numCountryFarmDescriptors; i++) {
	    const CountryFarmDescriptor *farmDescriptor = &countryFarmDescriptors[i];
            if (strcasecmp(cc2, farmDescriptor->countryName) == 0) {
		return farmDescriptor;
	    }
	}
    }
    return &defaultCountryDescriptor;
}

static std::list<std::string> *userServerNames;
static bool _usePool = true;

/*static*/ void
ESNTPHostNames::addUserServer(const std::string &userHostSpecification) {  // IP number or hostname
    if (!userServerNames) {
        userServerNames = new std::list<std::string>;
    }
    userServerNames->push_back(userHostSpecification);
}

/*static*/ void
ESNTPHostNames::removeUserServer(const std::string &userHostSpecification) {  // IP number or hostname
    assert(userServerNames);
    userServerNames->remove(userHostSpecification);
}

/*static*/ void
ESNTPHostNames::clearUserServerList() {
    if (userServerNames) {
        delete userServerNames;
        userServerNames = NULL;
    }
}

/*static*/ void 
ESNTPHostNames::enablePoolHosts() {
    _usePool = true;
}

/*static*/ void 
ESNTPHostNames::disablePoolHosts() {
    _usePool = false;
}

ESNTPHostNamesIterator::ESNTPHostNamesIterator(const char *countryCode)
:   _countryFarmDescriptor(getFarmDescriptorForCountry(countryCode)),
    _hostIndex(-1),
    _isUserHost(false),
    _userIterator(NULL)
{
}

ESNTPHostNamesIterator::~ESNTPHostNamesIterator() {
    if (_userIterator) {
        delete _userIterator;
    }
}

bool
ESNTPHostNamesIterator::next() {
    if (userServerNames) {
        if (!_userIterator) {
            _userIterator = new std::list<std::string>::iterator(userServerNames->begin());
        }
        if (*_userIterator != userServerNames->end()) {
            _host = **_userIterator;
            (*_userIterator)++;
            _proximity = 0;
            _isUserHost = true;
            return true;
        }
    }
    if (!_usePool) {
	return false;
    }
    _isUserHost = false;
    int numCountryServers;
    int numContinentServers;
    char hostbuf[32];
    assert(sizeof(hostbuf) > strlen("12.north-america.pool.ntp.org"));  // Largest expected string
    if (++_hostIndex < (numCountryServers = _countryFarmDescriptor->numberOfServers)) {
        snprintf(hostbuf, sizeof(hostbuf), "%d.%s.pool.ntp.org", _hostIndex, _countryFarmDescriptor->poolNameForCountry);
        _host = hostbuf;
        _proximity = 1;
        return true;
    } else if (_hostIndex < numCountryServers + (numContinentServers = _countryFarmDescriptor->continentDescriptor->numberOfServers)) {
        snprintf(hostbuf, sizeof(hostbuf), "%d.%s.pool.ntp.org", _hostIndex - numCountryServers, _countryFarmDescriptor->continentDescriptor->farmName);
        _host = hostbuf;
        _proximity = 2;
        return true;
    } else if (_hostIndex < numCountryServers + numContinentServers + numGlobalServers) { // All continents have 4 servers
        snprintf(hostbuf, sizeof(hostbuf), "%d.pool.ntp.org", _hostIndex - numCountryServers - numContinentServers);
        _host = hostbuf;
        _proximity = 3;
        return true;
    } else if (_hostIndex < numCountryServers + numContinentServers + numGlobalServers + 1) { // All continents have 4 servers
        strcpy(hostbuf, "time.apple.com");
        _host = hostbuf;
        _proximity = 4;
        return true;
    } else {
        return false;
    }
}

void 
ESNTPHostNamesIterator::reset(const char *countryCode) {
    if (_userIterator) {
        delete _userIterator;
        _userIterator = NULL;
    }
    if (countryCode) {
        _countryFarmDescriptor = getFarmDescriptorForCountry(countryCode);
    }
    _hostIndex = -1;
    _host = "";
    _isUserHost = false;
}

std::string 
ESNTPHostNamesIterator::host() {
    return _host;
}

int
ESNTPHostNamesIterator::totalNumberOfHostNames() {
    assert(_usePool || userServerNames);
    int poolCount = userServerNames ? (int)userServerNames->size() : 0;
    if (_usePool) {
        poolCount += _countryFarmDescriptor->numberOfServers
		    + _countryFarmDescriptor->continentDescriptor->numberOfServers
		    + numGlobalServers
		    + 1;  // time.apple.com
    }
    return poolCount;
}

/*static*/ int
ESNTPHostNamesIterator::numberOfUserHostNames() {
    return userServerNames ? (int)userServerNames->size() : 0;
}
